---
apiVersion: kubevirt.io/v1
kind: VirtualMachine
metadata:
  name: fedora-test-vm
spec:
  running: true # Set to false if you want to create it then start it manually with "virtctl start fedora-test-vm"
  template:
    metadata:
      labels:
        kubevirt.io/vm: fedora-test-vm
    spec:
      domain:
        machine:
          type: q35
        firmware: # Explicitly use EFI
          bootloader:
            efi:
              secureBoot: false
        resources:
          requests:
            memory: "2Gi"
          limits:
            memory: "2Gi"
        cpu:
          cores: 1
        devices:
          disks:
            - name: containerdisk
              disk:
                bus: virtio
              bootOrder: 1 # Ensure it's the first boot device
            - name: cloudinitdisk # Optional: for cloud-init, can be omitted for a basic boot test
              disk:
                bus: virtio
          interfaces:
            - name: default
              masquerade: {}
          rng: {} # Add a random number generator, good practice for modern VMs
      networks:
        - name: default
          pod: {}
      volumes:
        - name: containerdisk
          containerDisk:
            image: quay.io/containerdisks/fedora:latest # Using a recent Fedora cloud base image
        - name: cloudinitdisk # Optional: an empty cloud-init disk, often helps cloud images boot without errors
          cloudInitNoCloud:
            userData: |
              #cloud-config
              # You can add cloud-init user data here if needed, e.g., to set a password or add an SSH key.
              # For a basic boot test, just an empty valid cloud-init is fine.
              # Example to set a password for user 'fedora' (use with caution):
              # password: mysecurepassword
              # chpasswd: { expire: False }
              # ssh_pwauth: True
              user: fedora
              hostname: fedora-test-vm
---
apiVersion: kubevirt.io/v1
kind: VirtualMachine
metadata:
  name: vm
  labels: &labels
    app.kubernetes.io/component: vm
spec:
  running: true
  template:
    metadata:
      labels: *labels
    spec:
      networks:
        - name: default
          pod: {}
      domain:
        firmware:
          bootloader:
            efi:
              secureBoot: false
        features:
          acpi: {}
        machine:
          type: q35
        cpu:
          cores: 2
        memory:
          guest: 2Gi
        devices:
          disks:
            - name: homeassistant-disk
              bootOrder: 1
              disk:
                bus: virtio
          interfaces:
            - name: default
              masquerade: {}
      volumes:
        - name: homeassistant-disk
          persistentVolumeClaim:
            claimName: homeassistant-disk

---
apiVersion: cdi.kubevirt.io/v1beta1
kind: DataVolume
metadata:
  name: disk
spec:
  source:
    http:
      url: https://github.com/home-assistant/operating-system/releases/download/15.2/haos_generic-x86-64-15.2.img.xz
  pvc:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: 32Gi
    storageClassName: openebs-mayastor-replicated

---
apiVersion: v1
kind: Service
metadata:
  name: web-service
spec:
  selector:
    app.kubernetes.io/component: vm
  ports:
    - name: http
      port: 8123
      targetPort: http

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: tailscale-ingress
spec:
  ingressClassName: tailscale
  tls: [{ hosts: [homeassistant] }]
  defaultBackend:
    service:
      name: web-service
      port:
        name: http

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gatus-config
  labels:
    gatus.io/enabled: "true"
data:
  homeassistant.yml: |
    endpoints:
      - name: homeassistant
        url: http://homeassistant-web-service.apps
        conditions:
          - '[STATUS] == 200'
