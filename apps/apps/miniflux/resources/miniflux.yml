---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-deployment
  annotations:
    reloader.stakater.com/auto: 'true'
  labels: &labels
    app.kubernetes.io/component: web
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels: *labels
  template:
    metadata:
      labels: *labels
    spec:
      containers:
        - name: miniflux
          image: ghcr.io/miniflux/miniflux:2.2.13-distroless@sha256:38eed52e0a3ff3ecb5ace6f509e9a2ce2079bb673dcd82586a41c0f64160721f
          livenessProbe:
            httpGet:
              path: /healthcheck
              port: 8080
            initialDelaySeconds: 3
            periodSeconds: 3
          resources:
            requests:
              memory: 100M
            limits:
              memory: 1G
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            readOnlyRootFilesystem: true
            capabilities:
              drop: [ALL]
          env:
            - name: TZ
              value: America/Denver
            - name: RUN_MIGRATIONS
              value: '1'
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: miniflux-postgres-secret
                  key: POSTGRES_URL
          ports:
            - name: http
              containerPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-deployment
  annotations:
    reloader.stakater.com/auto: 'true'
  labels: &labels
    app.kubernetes.io/component: db
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels: *labels
  template:
    metadata:
      labels: *labels
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: db-volume
        - name: run
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      containers:
        - name: postgres
          image: docker.io/library/postgres:18.0-alpine@sha256:70b32afe0c274b4d93098fd724fcdaab3aba47270a4f1e63cbf9cc69d7bf1be4
          volumeMounts:
            - mountPath: /var/lib/postgresql
              name: data
            - mountPath: /run
              name: run
            - mountPath: /tmp
              name: tmp
          resources:
            requests:
              memory: 100M
            limits:
              memory: 1G
          securityContext:
            privileged: false
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            readOnlyRootFilesystem: true
            capabilities:
              drop: [ALL]
          env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: miniflux-postgres-secret
                  key: POSTGRES_SECRET
            - name: POSTGRES_USER
              value: miniflux
            - name: POSTGRES_DB
              value: miniflux
          ports:
            - name: postgres
              containerPort: 5432

---
apiVersion: v1
kind: Service
metadata:
  name: db-service
spec:
  selector:
    app.kubernetes.io/component: db
  ports:
    - name: postgres
      port: 5432
      targetPort: postgres

---
apiVersion: v1
kind: Service
metadata:
  name: web-service
spec:
  selector:
    app.kubernetes.io/component: web
  ports:
    - name: http
      port: 80
      targetPort: http

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gatus-config
  labels:
    gatus.io/enabled: 'true'
data:
  miniflux.yml: |
    endpoints:
      - name: miniflux
        url: http://miniflux-web-service.apps
        conditions:
          - '[STATUS] == 200'

---
apiVersion: k8s.bitwarden.com/v1
kind: BitwardenSecret
metadata:
  name: secret
  annotations:
    argocd.argoproj.io/sync-options: Replace=true
spec:
  organizationId: 575f69b2-49f4-456d-bd6f-b14101103188
  secretName: miniflux-postgres-secret
  map:
    - secretKeyName: POSTGRES_SECRET
      bwSecretId: c681ce05-736b-405f-aa46-b33800e5c43f
    - secretKeyName: POSTGRES_URL
      bwSecretId: d328dccb-9e6d-4004-913d-b33800e732f1
  authToken:
    secretName: bw-auth-token
    secretKey: token

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
  annotations:
    cert-manager.io/cluster-issuer: cloudflare-issuer
spec:
  ingressClassName: internal
  tls:
    - hosts: [&host miniflux.beaver-cloud.xyz]
      secretName: beaver-cloud-wildcard-cert
  rules:
    - host: *host
      http:
        paths:
          - pathType: Prefix
            path: '/'
            backend:
              service:
                name: web-service
                port:
                  name: http
