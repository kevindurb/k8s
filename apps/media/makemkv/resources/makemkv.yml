---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment
  labels: &labels
    app.kubernetes.io/component: web
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels: *labels
  template:
    metadata:
      labels: *labels
    spec:
      securityContext:
        fsGroup: 1000
      nodeSelector:
        kubernetes.io/hostname: drone-04
      containers:
        - image: jlesage/makemkv:v25.10.1@sha256:17787b7caa17f6fefa80597c3a8f038d7701aac4324e5559d70570b3b4e69a9b
          name: makemkv
          env:
            - name: MAKEMKV_KEY
              value: T-PuNYycrTTHW4QEOfhDrMuJMpojNqmY5CGuESAKXzHvwBvBcXhtsJLj4g6OAXd1zfzk
            - name: USER_ID
              value: '1000'
            - name: GROUP_ID
              value: '1000'
            - name: SUP_GROUP_IDS
              value: '11'
            - name: TZ
              value: America/Denver
            - name: DARK_MODE
              value: '1'
            - name: AUTO_DISC_RIPPER
              value: '1'
            - name: AUTO_DISC_RIPPER_EJECT
              value: '1'
            - name: AUTO_DISC_RIPPER_MIN_TITLE_LENGTH
              value: '600' # 10 minutes
            - name: AUTO_DISC_RIPPER_FORCE_UNIQUE_OUTPUT_DIR
              value: '1'
          securityContext:
            privileged: true
          ports:
            - name: http
              containerPort: 5800
          volumeMounts:
            - name: media
              mountPath: /output
              subPath: Downloads

            - name: sr0
              mountPath: /dev/sr0

            - name: sg1
              mountPath: /dev/sg1

            - name: sr1
              mountPath: /dev/sr1

            - name: sg2
              mountPath: /dev/sg2
      volumes:
        - name: media
          persistentVolumeClaim:
            claimName: media-pvc

        - name: sr0
          hostPath:
            path: /dev/sr0

        - name: sg1
          hostPath:
            path: /dev/sg1

        - name: sr1
          hostPath:
            path: /dev/sr1

        - name: sg2
          hostPath:
            path: /dev/sg2

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hooks
data:
  disk_rip_started.sh: |
    #! /bin/sh
    DRV_ID="$1"
    DISC_LABEL="$2"
    OUTPUT_DIR="$3"

    curl -d "The automatic disc ripper started ripping disc '$DISC_LABEL' (drive $DRV_ID) to '$OUTPUT_DIR'." http://ntfy-web-service.monitoring/makemkv

  disk_rip_terminated.sh: |
    #! /bin/sh
    DRV_ID="$1"
    DISC_LABEL="$2"
    OUTPUT_DIR="$3"
    STATUS="$4"

    case "$STATUS" in
        0)
            curl -d "The automatic disc ripper successfully ripped disc '$DISC_LABEL' (drive $DRV_ID)." http://ntfy-web-service.monitoring/makemkv
            ;;
        *)
            curl -d "The automatic disc ripper failed to rip disc '$DISC_LABEL' (drive $DRV_ID)." http://ntfy-web-service.monitoring/makemkv
            ;;
    esac

---
apiVersion: v1
kind: Service
metadata:
  name: web-service
spec:
  selector:
    app.kubernetes.io/component: web
  ports:
    - name: http
      port: 80
      targetPort: http

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: media-pvc
spec:
  accessModes: [ReadWriteMany]
  volumeName: media-nfs-pv
  storageClassName: ''
  resources:
    requests:
      storage: 12Ti

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: media-nfs-pv
spec:
  capacity:
    storage: 12Ti
  accessModes:
    - ReadWriteMany
  nfs:
    server: 192.168.50.43
    path: /
  mountOptions: [nfsvers=4.2]

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: gatus-config
  labels:
    gatus.io/enabled: 'true'
data:
  makemkv.yml: |
    endpoints:
      - name: makemkv
        url: http://makemkv-web-service.media
        conditions:
          - '[STATUS] == 200'
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: ingress
  annotations:
    cert-manager.io/cluster-issuer: cloudflare-issuer
spec:
  ingressClassName: internal
  tls:
    - hosts: [&host makemkv.beaver-cloud.xyz]
      secretName: beaver-cloud-wildcard-cert
  rules:
    - host: *host
      http:
        paths:
          - pathType: Prefix
            path: '/'
            backend:
              service:
                name: web-service
                port:
                  name: http
